#!/usr/bin/env node
process.env['DEBUG'] = 'tracker-notifier:*';

/**
 * Module dependencies.
 */
const fs = require('fs');
const path = require('path');
const http = require('http');
const debug = require('debug')('tracker-notifier:server');

if (!fs.existsSync(path.join(__dirname, '..', 'config.json'))) {
    console.error('Configuration file does not exist!');
    console.error('Try copying config.example.json to config.json and change settings.');
    console.error('The program will exit now.');
    throw new Error('Configuration file does not exist!');
}

/**
 * Get app and server reference, and get port to listen to
 */

const system = require('../app');
let app = system.app;
let server = system.server;
let port = normalizePort(process.env.PORT || '3000');

/**
 * Listen on provided port, on all network interfaces.
 */

app.set('port', port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}